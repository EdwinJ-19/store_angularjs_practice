angular js installation:
1) npm install -g @angular/cli@12



ANGULARJS is the name of the first version, so we say ANGULAR!
Instead of MVC in angularJS, 
-> so main important thing is COMPONENTS (every objects that will be created in separate separate components.)
-> AJAX (asynschronous javascript)

runn and create:-
1) to check if the angular is there: ng v 
-> if the node is not working, then open powershell and add this code-
Step 1

First, you have to need to open the command prompt and run this command.

-> set-ExecutionPolicy RemoteSigned -Scope CurrentUser 

Step 2

Now you have to run the second command on your system. This command is:

-> Get-ExecutionPolicy

Step 3

To view their policy, you need to run this command in your command prompt:

-> Get-ExecutionPolicy -list  

2) to create new project:-
ng new projectname

3) to run the project:-
- change the directory to src: cd src
- then run the server by using: ng serve
=> another way is that you can directly open the project using this code: ng serve -o


-- node_modules is actually called as dependencies
-- SRC is main important 
-- inside the SRC folder, app is a component for each logic applying the main html page that is index.html(outside the SRC).

4) to create new components:
- to generate components: ng g c (ng generate components)

5) after creating new components:
- add the line in ur html to show the new components using html tag:
<app-[components-name]></app-[components-name]>

6) in components folder, you can make one html file but multiple files for css, and remember to add it in [components-name].components.ts urls.

7) to install boostrap, write npm install bootstrap in terminal

8) now to add boostrap css in the global file that is "angular.json", now search styles in angular and add one line that is "node_modules/bootstrap/dist/css/bootstrap.min.css" same as scripts as well.


DATA BINDING:-
1) string interpolation -> {{store}}
2) property binding (values etc etc) -> [value] (to display the values)
3) event binding (like clickon button, or response button etc) -> (click) [does the function event listener]
4) two way binding (mixture of property and event) -> [()] (shortcut method to show and functioning!)


--> if you want make custom datatype then create a interface which helps you to customize the known properties, like below:
export interface Product{
  name:string,
  price:number,
  description:string,
  category:string,
  image?:string
}

ANGULAR DIRECTIVE:-
1) Component
2) Structural -> DOM changes(new) - *ngFor (looping), *ngIf (condition) -> with the use of *
3) Attribute -> [ngstyle] -> to dynamically show the results or overall condition -> with use of property binding

*ngFor="":- for loop to display all of the object

PIPES:- (using string interpolation and | in html)

BUILT-IN PIPES:
-> uses for filtering and array finding and some custom objects
-> also uses to transform strings,currency amounts, dates and other data for display
-> pipes are a simple function to use in template expression to accept and input value and return a transformed value.
-> {{product.price | currency:'INR'}} => currency pipes
-> {{currDate | date='short/full/medium'}} => date pipes
-> {{product.name | lowercase/uppercase/titlecase}} => case pipes
-> {{product.name | titlecase | slice:1:3}} => slicing pipes
-> {{product | json}} => json pipes (which helps to find out what objects we have)

CUSTOM PIPES: (ng g p "pipe_name")
=> in the custom pipes files, there you will see the transform which is similarly as interfaces.
=> without implementing tranform, the values will not show in browser.
=> you can do arguments in html like elements below,
      <div class="col" *ngFor = "let electronics of electronicsProducts | customPipe: 20000">

There are two types of pipes:
1) pure pipes
2) impure pipes




...args -> spread operator

components.ts=>
1) constructor means that the data will be call first than execute
2) ngOnInit means that the data will wait after executing the data will show all of the values.


Events:-
1) clickevent
2) input event (child property to parent property-> @Input() products !: Product[];)
3) output event (using parent property to display the values -> @Output)
--> EventEmitter() : it is a class which we used to send our own data to the new component
emit() : it is a object function from EventEmitter().

advantages of OUTPUT and INPUT:-
1) you can add this output and input method in such small components for like search filter.

disadvantage of OUTPUT and INPUT:-
1) if you are doing output event directly then you will get an output only but not the response from the input, so to use that we have to uses services.

SERVICES:-
ng g s <services-name>
=> uses to pass the old data to the new data using constructor values.
=> if you want to access the old data to the new data, you have to mentioned the method name as private or public (access modifiers) then variables name:-
constructor(private dataHandler: dataHandlerService)

Advantages of Services:
1) 

Disadvantages of Services:
1) you have to create multiple file for multiple classes and also add the class name to every file inside of your parent class.

when you are using Input and Output event method, so you have to add this object in ngOnInit not in constructor.
Why? because [constructor] runs first before the input added inside and [ngOnInit] works like when the input and output does the works.



ngDoCheck():- its updates ur object from directives in UI i.e. HTML like HTML:- *ngFor = "let allproducts of tempvalue", so to fix that we have to tell the angular to check whether it is changing or not.


Difference Between Input/Output and Services:-
Services:
=> 1) class, constructor
=> 2) push, ngdocheck
=> 3) cartcount

Input/Output:
=> 1) @input/@output, binding, data pass
=> 2) @output, emit, event binding, function, data pass

Custom Directives (ng g d ):
=> you can define your own directives to attach the custom behaviour to the DOM element.
=> you have to define the @Directive selector in html to display the behaviour.

---> ElementRef: a wrapper around the native element of a view i.e. DOM element and it also render the object.
---> HostListener: Decorator that declares a DOM event to listen for, and provides a handler method to run when that event occurs. made for only angular and its same as javacsript decorator.

object javascript:- {key:values}

Promise:- one time data response, uses http.get("....").then((err))
Observables:- 
->objectlike observing,
->streamlike one by one time data response, 
->uses http.get("...").subscribe(),
->if you are creating a variables, then you have to do it in ngOnInit, inside that const you have 
->to add $ sign as well like - const obs$ = new Observable((observer)=>)
->types of subscribe -> value (val), error (err), complete ()
->of keywords uses like an array - const obs$ = of(1,2,3,4,5,6) without the help of observer class
-> types of operator: map,filter,take etc etc and you have to manually type the imports in ur components file.

API:-
-> import httpclient module in app.module.ts and import it in services
using with django and xampp for sql database
getmethod:-
postmethod:-


ROUTE:-
-> import RouterModule in app.module.ts
-> then create a variables for path routes like below,
const routes = [
  {path: '', component: ProductlistComponent},
  {path: 'about-us', component: AboutUsComponent}
]
-> then write in imports:[
  RouterModule.forRoot(routes)
] 
-> after this add in app.component to display all of the values, to show that in tag that is,
<router-outlet></router-outlet>
-> now to use in html tag, for that you have to write,
            <a class="nav-link" routerLink="/about-us">About Us</a>

-> to display the particular id, you have to create another component to show the electronics product component, to do like this,
  {path: 'product/:id', component: ProductComponent},
-> after putting the product id in app.module.ts, now to assign this value in ur property binding using routerlink like this, 
                <a [routerLink]="['product', electronics.id]"></a>
-> from product.ts,
constructor(private route: ActivatedRoute) {
    // this indicates to show the id of the product
    this.route.params.subscribe((data)=>{
      console.log(data);
    })
   }
-> if the page is not found, then you have to write the redirectTo to the error 404 page.
  {path: '404', component: PageNotFoundComponent},
  {path: '**', redirectTo: '404'}


  FORMS:-
  -> two types of forms that is template driven and reactive forms
  
  1) template driven:-
  --> done in ng model
  --> uses for get/post with action included.
  --> including events with action.

  2) reactive forms
  --> advanced forms
  --> but different from template driven.